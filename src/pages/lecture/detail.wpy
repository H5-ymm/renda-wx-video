<style lang="less">
@import "../../style/list.less";
page {
  overflow: hidden;
}
.page-home {
  height: 100%;
  background: #F6F7FA;
  overflow: hidden;
  .view-content  {
    height: calc(100% - 50px);
  }
  .page {
    overflow: hidden;
  }
  .view_padding {
    padding: 20rpx 30rpx;  
  }
  .swipe-container {
      height: 560rpx;
      // height: 55%;
      background: #fdfdfe;
      position: relative;
      .big_icon {
        margin-right: 0;
        margin:  0 auto;
      }
    }
    .line {
      padding: 0 30rpx;
    }
    .box {
      position: absolute;
      height: 90rpx;
      width: 100%;
      bottom: 140rpx;
      z-index: 12;
      left: 0;
      color: #fff;
      font-size: 24rpx;
      // display: none;
      view {
        height: 100%;
        margin: 0 10rpx;
        line-height: 90rpx;
        text {
          display: inline-block;
          margin-right: 10rpx;
        }
      }
      .people_icon {
        width: 30rpx;
        height: 32rpx;
        margin-right: 10rpx;
      }
    }
    .bg2 {
      position: absolute;
      height: 76%;
      width: 100%;
      top: 0;
      left: 0;
      background: -webkit-linear-gradient(bottom,#1D1D27,rgba(31, 63, 128, 0.16),rgba(29, 29, 39, 0));
      z-index: 1;
    }
    .swipe-box {
      width: 100%;
      height: 100%;
      .video_file {
        position: relative;
        display: block;
        height:76%;
        width: 100%;
      }
      &.swipe-box-com {
        .video_file {
          height:100%;
        }
        .bg2 {
          height:100%;
        }
        .box {
          bottom: 0;
        }
      }
    }
   .image-row {
      position: absolute;
      width: 96%;
      top: 10rpx;
      left: 30rpx;
      z-index: 33;
      .image--col {
        height: 70rpx;
      }
      .icon{
        width: 62rpx;
        height: 62rpx;
        border-radius: 50%;
      }
   }
   video, .swiper-image {
    width: 100%;
    height: 100%;
    object-position: center;
    z-index: 22;
    // background: -webkit-linear-gradient(bottom,#1D1D27,rgba(31, 63, 128, 0.16),rgba(29, 29, 39, 0));
  }
  .video_file #video_img {
    position: absolute;
    left: 40%;
    top: 30%;
    z-index: 90;
  }
  .loading_btn {
    width:164rpx;
    height:64rpx;
    border-radius: 32rpx;
    border:1px solid rgba(255,255,255,.4);
    color: #fff;
    text-align: center;
    line-height: 64rpx;
  }
  .cell {
    padding: 10rpx 30rpx;
    .page__desc {
      margin-top: 0;
    }
  }
  .avatar_icon {
    width: 50rpx;
    height: 50rpx;
    border-radius: 50%;
    margin-right: 30rpx;
  }
  .page__text__active {
    font-size: 32rpx;
  }
  .section {
    margin-top: 20rpx;
    background: #fdfdfe;
    >.page__title {
      font-weight: bold;
    }
    .swipe-end {
      position: relative;
      padding-top: 20rpx;
    }
    .swipe-container {
      padding-right: 30rpx;
    }
    .line {
      // padding: 0 30rpx 10rpx;
      .page__title {
        font-weight: none;
        font-size: 24rpx;
      }
       &.line1 {
        .page__title {
          font-weight: bold;
          font-size: 30rpx;
        }
      }
    }
  }
  .header-tab {
    background: #fdfdfe;
    &.tabBar {
      width: 100%;
      .weui-flex__item {
        flex: auto;
      }
      .tab-line {
        bottom: 0;
        width: 60rpx;
        // &.line0 {
        //   left: 8%;
        // }
        // &.line1{
        //   left: 36%;
        // }
        // &.line2 {
        //   left: 63%;
        // }
        // &.line3 {
        //   left: 86%;
        // }
      }
    } 
  }
  .apply_btn {
    width:100%;
    height:50px;
    background:#1890FF;
    color: #fff;
    text-align: center;
    font-size: 32rpx;
    box-shadow:0px -4px 8px 0px rgba(10,17,40,0.1);
  }
  .tab-box {
    height: 100rpx;
   
  }
  .section1 {
    // height: calc(100% - 346px);
     height: calc(100% - 60px);
     &.section2 {
       height: auto;
       padding-bottom: 20rpx;
     }
    // height: calc(100% - 40px);
  }
  .canvas-box {
    width:100%;
    height: 100%;
    position: relative;
    .swiper-icon {
      position: absolute;
      left: 30rpx;
      top: 50%;
      z-index: 99;
      width: 80rpx;
      height: 80rpx;
      &.swiper-icon1 {
        left: 86%;
      }
    }
    .swiper {
      // height: calc(100% - 52px);
      height: calc(100% - 40px);
      width: 100%;
      .swiper-item {
        width:100%;
        height: 100%;
        text-align: center;
        image {
          width: 100%;
          height: 100%!important;
        }
      }
    }
    .page-box {
      position: absolute;
      bottom: 0;
      left: 45%;
    }
  }
  .page__title {
    .pdfName {
      width: 200px;
      display: inline-block;
      font-size: 26rpx;
    }
  }
  .pdf_icon {
    width: 56rpx;
    height: 60rpx;
    margin-right: 20rpx;
  }
  .share-btn {
    background: none;
    line-height: auto;
    font-size: 0;
    margin: 0;
    &::after {
      border:none;
    }
  }
}
.container-box {
    background-image: url(https://mc.qcloudimg.com/static/img/7da57e0050d308e2e1b1e31afbc42929/bg.png);
    background-color: #333;
    background-repeat: no-repeat;
    background-size: cover;
    height:55%;
    width: 100%;
    position: relative;
    &.container-box1 {
      height: 100%;
    }
    .center {
      position: absolute;
      left: calc(50vw - 55px);
      top: calc(50vh - 55px);
      width: 110px;
      height: 110px;
    }
}
cover-view {
  overflow:initial!important;
}
.operate {
  position: absolute;
  margin-left: auto;
  margin-right: auto;
  right: 0;
  left: -30rpx;
  bottom:0;
  width: fit-content;
  height: 50px;
}

.operate-nolink {
  position: absolute;
  right: 0;
  left: 0;
  width: fit-content;
  height: 80px;
}

.img-box {
  position: relative;
  display:inline-block;
  height: 100rpx;
  width: 160rpx;
  vertical-align: middle;
  &.input-box {
    width: 260rpx;
    height: auto;
    position: absolute;
    bottom: 15rpx;
    left: 20px;
    z-index: 888;
    .weui-input {
      background:rgba(255,255,255,1);
      border-radius:60rpx;
      height: 60rpx;
      text-align: left;  
      padding-left: 10rpx;
      font-size: 25rpx;
    }
  }
}
.play-icon {
  position: absolute;
  bottom: 15rpx;
  right: 20px;
  width: 60rpx;
  height: 60rpx;
}
.message-box {
  width: 400rpx;
  height: 300rpx;
  padding-right: 10rpx;
  position: absolute;
  bottom: 80rpx;
  overflow: auto;
  left: 15px;
  font-size: 23rpx;
  color: #fff;
  overflow: hidden;
  .message-swiper {
    overflow: auto;
    height: 100%;
    padding: 6rpx;
    position: relative;
    .item {
      // height: 50rpx!important;
      margin-bottom: 16rpx;
      .weui-flex__item {
        flex: auto;
      }
      .text {
        margin: 6rpx 0;
        .nick {
          padding: 0 8rpx;
          color: #F3A04F;  
        }
        .avatar {
          width: 40rpx;
          height: 40rpx;
          border-radius: 50%;
        }
        .message {
          word-break: break-all;
          width: 100rpx;
        }
      }
    }
  }
}
.img-view {
  position: relative;
  display: block;
  width: 50px;
  height: 50px;
}

.img-box-big {
  position: relative;
  display:inline-block;
  height: 60px;
  width: 60px;
  padding-left: 40px;
  vertical-align: middle;
}

.img-view-big {
  position: relative;
  display: block;
  width: 60px;
  height: 60px;
}

.img-box-small {
  position: relative;
  display:inline-block;
  margin-left: calc(100vw - 80px - 50px - 80px);
  height: 50px;
  width: 50px;
  vertical-align: middle;
}
.img-view-small {
  position: relative;
  display: block;
  width: 50px;
  height: 50px;
}
</style>
<template>
  <view class="page-home">
    <scroll-view scroll-y="true" refresher-enabled="true" @scrolltolower="searchScrollLower"
     class="{{(rendaUserType==1&&uid!=com_uid) || lectureInfo.status==4 ? 'page': 'view-content'}}" @refresherrefresh="bindrefresherrefresh">
      <swiper class="swipe-container {{rendaUserType==2?'swipe-container1':''}}" wx:if="{{(com_uid!= uid && rendaUserType==1) || !overBtnShow}}"> 
        <swiper-item class="swipe-box {{rendaUserType==1?'swipe-box-com':''}}" >
          <view class="bg2" wx:if="{{lectureInfo.type==2&&lectureInfo.status!=4}}"></view>
          <view class="image-row">
            <view class="weui-flex between image--col">
              <image
                src="https://d.rsd123.com/uploads/images/image/back.png"
                class="icon"
                @tap="back"
                mode="aspectFit">
                <button open-type="share" class="share-btn">
                <image
                  src="https://d.rsd123.com/uploads/images/image/share_top.png"
                  class="icon"
                  mode="aspectFit">
              </button> 
            </view>
          </view>
          <view class="video_file">
            <view class="loading_btn" id="video_img" wx:if="{{networkType=='none'}}" @tap="againLoading">重新加载</view>
            <video name="media" id="video" custom-cache="false"  src="{{lectureInfo.enclosure}}" controls  wx:if="{{lectureInfo.type==1&&lectureInfo.status!=4}}">
            </video>
            <image src="{{lectureInfo.enclosure}}" mode="scaleToFill" alt="" wx:if="{{lectureInfo.type==2&&lectureInfo.status!=4}}" class="swiper-image shadow">
            <video name="media" id='myvideo' custom-cache="false" loop="true" @play="bindplay" src="{{lectureInfo.back_url}}" controls  wx:if="{{lectureInfo.back_url&&lectureInfo.status==4}}">
            </video>
          </view>
          <view class="box" wx:if="{{lectureInfo.type==2}}">
            <view class="weui-flex between">
              <view>
                <image
                  src="https://d.rsd123.com/uploads/images/image/people.png"
                  class="people_icon"
                  mode="aspectFill">
                <text class="num">{{lectureInfo.addNum}}人</text>
              </view>
            </view>
          </view>
          <view class="line weui-flex between" wx:if="{{rendaUserType==2}}">
            <view class="page__title">{{lectureInfo.title}}</view>
            <view @tap="collect">
              <image
                src="https://d.rsd123.com/uploads/images/collect.png"
                class="big_icon"
                wx:if="{{!lectureInfo.collectNum&&rendaUserType==2}}"
                mode="aspectFill">
                <image
                src="http://ttxsg.com.cn:39009/uploads/img/collect.png"
                class="big_icon"
                wx:if="{{lectureInfo.collectNum&&rendaUserType==2}}"
                mode="aspectFill">
            </view>
          </view>
          <view class="cell weui-flex between" wx:if="{{rendaUserType==2}}">
            <view class="weui-flex start">
              <image
                src="{{lectureInfo.logo_url}}"
                class="avatar_icon"
                mode="aspectFill">
              <view class="page__desc">{{lectureInfo.title}}</view>
            </view>
            <view class="page__desc">{{lectureInfo.starttime}}</view>
          </view>
        </swiper-item>
      </swiper>
      <view class="container-box {{isFull ? 'container-box1': ''}}" wx:if="{{(com_uid == uid&&rendaUserType==1&&overBtnShow) || rendaUserType==2&&overBtnShow}}">
        <mlvb-live-room id="id_liveroom" wx:if="{{showLiveRoom}}" destroyRoom="{{destroyRoom}}" roomid="{{roomID}}" role="{{role}}" roomname="{{roomName}}" pureaudio="{{pureAudio}}" debug="{{debug}}" muted="{{muted}}" beauty="{{beauty}}" template="float" @RoomEvent="onRoomEvent">
          <!-- 主播推流界面上叠加的操作按钮 -->
          <cover-view slot="caster" style='position:absolute;bottom:0;height:70px;width:50%;right:30px'>
            <cover-view class="operate">
              <cover-view class='img-box'>
                <cover-image class='img-view' src="/images/camera{{frontCamera?'':'-gray'}}.png" @tap="changeCamera"></cover-image>
              </cover-view>
              <cover-view class='img-box'>
                <cover-image class='img-view' src="/images/{{beauty > 0? 'beauty' : 'beauty-dis'}}.png" @tap="setBeauty"></cover-image>
              </cover-view>
            </cover-view>
          </cover-view>

          <!-- 观众播放界面上叠加的操作按钮 -->
          <cover-view slot="audience" style='position:absolute;bottom:0;height:70px;width:50%;right:30px'>
            <cover-view class="{{!linked? 'operate-nolink' : 'operate'}}">
              <cover-view wx:if="{{linked}}" class='img-box'>
                <cover-image class='img-view' src='/images/camera.png' @tap="changeCamera"></cover-image>
              </cover-view>
              <cover-view wx:if="{{linked}}" class='img-box'>
                <cover-image class='img-view' src="/images/{{beauty > 0? 'beauty' : 'beauty-dis'}}.png" @tap="setBeauty"></cover-image>
              </cover-view>
            </cover-view>
          </cover-view>
        </mlvb-live-room>
        <view class='img-box input-box' wx:if="{{overBtnShow}}">
          <input class="weui-input" placeholder-class="placeholder" value="{{message}}" @change="changeInput"  placeholder="请输入" />
        </view>
        <image src="../../images/full.png" alt="" class="play-icon" wx:if="{{!isFull}}" mode="aspectFill" @tap="setFull">
        <image src="../../images/play.png" alt="" class="play-icon" wx:else  mode="aspectFill" @tap="setFull">
        <!-- 弹幕 -->
        <view class='message-box' wx:if="{{overBtnShow}}"> 
          <scroll-view class="message-swiper" scroll-y="true" scroll-with-animation="true" scroll-into-view="text-{{num}}">
            <repeat for="{{messageList}}"  wx:key="index">
              <view class="item" id="text-{{index+1}}">
                <view class="text weui-flex start">
                  <view class="weui-flex start weui-flex__item">
                    <image src="{{item.avatar}}" alt="" class="avatar"  mode="aspectFill">
                    <view class="nick">{{item.nick}}</view> 
                  </view>
                  <view class="message weui-flex__item">{{item.text}}</view>
                </view>
              </view>
            </repeat>
          </scroll-view>
        </view>
        <!-- 弹幕 -->
      </view>
      <pdfView @applyResume="applyResume" :lectureInfo.sync="lectureInfo" :overBtnShow.sync="overBtnShow" wx:if="{{!isFull}}"></pdfView>
    </scroll-view>
    <view class="apply_btn weui-flex center" @tap="submit" wx:if="{{!lectureInfo.alectureApplyNum&&rendaUserType==2}}">立即免费报名</view>
    <view class="apply_btn weui-flex center" @tap="handleOver" wx:if="{{lectureInfo.alectureApplyNum&&rendaUserType==2}}">{{roomID&&lectureInfo.status==5?'观看宣讲':'宣讲未开始'}}</view>
    <view class="apply_btn weui-flex center" @tap="handleOver" wx:if="{{rendaUserType==1&&uid==com_uid}}">{{overBtnShow?'结束宣讲':'开始宣讲'}}</view>
    <actionSheet :isScaleModal.sync="isScaleModal" :text.sync="text" :okText.sync="okText" @handleClose="handleClose" @handleOk="handleOk"></actionSheet>
 </view>
</template>
<script>
import wepy from 'wepy'
import { $http, uploadFileVideo } from '@/http.js'
import $moment from 'moment'
import { getImgUrl, wxToast, wxNavigateTo, wxRedirectTo, contactPhone, handleTime, wxShowModal } from '@/util.js'
import actionSheet from '@/components/actionSheet'
import jobList from '@/components/jobList'
import pdfView from '@/components/pdfView'
import { login } from '@/lib/mlvbliveroomcore.js'
export default class lectureDetail extends wepy.page {
  components = {
    jobLectureList: jobList,
    actionSheet: actionSheet,
    pdfView: pdfView
  }
  data = {
    isScaleModal: true,
    TIM: null,
    message: '',
    rendaUserType: 0,
    isShow: true,
    show: false,
    lectureInfo: {},
    id: '',
    uid: '',
    com_id: '',
    com_uid: '',
    flag: true,
    addBtn: true,
    networkType: '',
    autoplay: false,
    showPalyBtn: true,
    userName: '',
    roomID: '',
    roomName: '',
    pureAudio: false,
    role: '',
    showLiveRoom: false,
    rooms: [],
    comment: [],
    linked: false,
    debug: false,
    frontCamera: true,
    inputMsg: [],
    muted: false,
    toview: '',
    beauty: 5,
    shouldExit: false,
    phoneNum: '',
    headerHeight: 40,
    statusBarHeight: 30,
    options: {},
    roomList: [],
    overBtnShow: false,
    text: '',
    okText: '',
    messageList: [],
    animationData: {},
    timer: null,
    num: -1,
    TaskId: '',
    isFull: false,
    destroyRoom: false,
    isGetLoginInfo: false,
    firstshow: true,
    userAvatar: '',
    userName: ''
  }
  config = {
    enablePullDownRefresh: true,
    pageOrientation: 'auto',
    "usingComponents": {
       "mlvb-live-room": "/components/mlvb-live-room/mlvbliveroomview"
    }
  }
  events = {
    handleClose: () => {
      this.isScaleModal = !this.isScaleModal
      this.$apply()
    },
    handleOk: () => {
      this.isScaleModal = !this.isScaleModal
      this.$apply()
      if (this.rendaUserType == 2) {
        if (!wx.getStorageSync('rendaPerfect')) {
          wxNavigateTo('/pages/my/resume') 
        } else {    
          this.component = this.$wxpage.selectComponent("#id_liveroom")
          this.component.stop()
          this.overBtnShow = false
          this.$apply()
        }
      } else {
        this.destroyRoom = true
        this.$apply()
        this.overVideo()
      }
    },
    applyResume(item) {
      if (!wx.getStorageSync('rendaPerfect')) {
        this.isScaleModal = !this.isScaleModal
        this.$apply()
      } else {
        let params = {
          uid: this.uid,
          job_id: item.id,
          jf_id: this.id,
          type: 2
        }
        $http('/personaljob/addapplyJob',params).then(res => {
          if (res.data) {
            wxToast('投递成功')
            // this.getList(this.com_id)
            this.$broadcast('applyResumeOk')
          } else {
            wxToast('投递失败')
          }
        })
      }
    }
  }
  start() {
    this.component = this.$wxpage.selectComponent("#id_liveroom")
    this.component.start();
    this.createTask()
  }
  onShareAppMessage (res) {
    var url = '/pages/lecture/detail?query='+ this.id + '&roomID=' + this.roomID + '&roomName=' + this.roomName + '&userName=' + this.options.userName + '&isShare=true'
    return {
      title: '邀请观看宣讲会',
      imageUrl: getImgUrl('/uploads/images/zb.png'),
      path: url
    }
  }
  _initIM () {
    wx.$app.off(this.TIM.EVENT.MESSAGE_RECEIVED, this._onIMMessageReceived);
    wx.$app.on(this.TIM.EVENT.MESSAGE_RECEIVED, this._onIMMessageReceived, this)
  }
  _onIMMessageReceived(event) {
		this.getGroupMessage()
  }
  videoInit() {
    var self = this;
    var userSig = wx.getStorageSync('userSig')
    let userInfo = wx.getStorageSync('wxInfo')?JSON.parse(wx.getStorageSync('wxInfo')):{}
    var loginInfo = {
      sdkAppID: 1400335565,
      userID: this.uid + '',
      userSig: userSig,
      userName: userInfo.nick,
      userAvatar:  userInfo.avatar
    }
    //MLVB 登录
    login({
      data: loginInfo,
      success: function (ret) {
        self.firstshow = false;
        self.isGetLoginInfo = true;
        self.$apply()
      },
      fail: function (ret) {
        //登录失败
        self.isGetLoginInfo = false;
        self.$apply()
        wx.showModal({
          title: '提示',
          content: ret.errMsg,
          showCancel: false,
          complete: function () {
            wx.navigateBack({});
          }
        });
      }
    });
  }
  onLoad(options) {
    this.id = options.query
    this.uid = wx.getStorageSync('rendaUid')
    this.rendaUserType = wx.getStorageSync('rendaUserType')
    console.log(options)
    console.log('开始')
    this.options = options
    this.roomName = options.roomName
    if (this.rendaUserType == 2) {
      this.roomID = options.roomID
    }
    this.$apply()
  }
  onShow() {
    wx.onNetworkStatusChange(res => {
      this.networkType = res.networkType
      this.$apply()
    })
    wx.getNetworkType({
      success: res => {
        this.networkType = res.networkType
        this.$apply()
      }
    })
    this.getLectureDetail(this.id)
    this.videoInit()
  }
  onReady () {
    wx.setNavigationBarTitle({
      title: this.roomName
    })
  }
  overVideo() {
    let params = {
      uid: this.uid,
      id: this.id
    }
    $http('/homepresentation/endPreachInfo', params).then(res => {
      this.component = this.$wxpage.selectComponent("#id_liveroom")
      this.component.stop();
      // this.overTask()
      wxToast('宣讲结束')
      wx.navigateBack({
        delta: 1
      })
    })
  }
  overTask() {
     let params = {
      StreamName: 'rendalive_' + this.id,
      TaskId: this.TaskId
    }
    $http('/livebroadcast/stopLiveRecord',params).then(res => {
      if (res.data) {
        wxToast('宣讲结束')
        wx.navigateBack({
          delta: 1
        })
      } else {
        wxToast('推出宣讲失败')
      }
    })
  }
  createTask() {
    let params = {
      StreamName: 'rendalive_' + this.id,
      AppName: 'live',
      RecordType: 'video',
      FileFormat: 'mp4'
    }
    $http('/livebroadcast/createLiveRecord', params).then(res => {
      this.TaskId = res.data.TaskId
    })
  }
  getGroupMessage() {
    let promise = wx.$app.getGroupMemberList({groupID: this.roomID, count: 30, offset:0});
    promise.then(imResponse => {
      const memberList = imResponse.data.memberList; // 消息列表。。
      this.getMessage(memberList)
    })
  }
  getMessage(memberList) {
    let promise = wx.$app.getConversationList()
    promise.then(imResponse => {
      const messageList = this.changeList(imResponse.data.conversationList) // 消息列表。
      let arr = []
      messageList.forEach(val => {
        memberList.forEach(item => {
          if (item.userID == val.fromAccount) {
            arr.push({text: val.text,nick: item.nick,avatar:item.avatar})
          }
        })
      })
      this.num = this.num + 1 
      this.messageList = this.messageList.concat(arr)
      this.message = ''
      this.$apply()
    })
  }
  changeList(list) {
    let arr = []
		list.forEach(item=> {
      const { type, lastMessage } = item
			if (type == 'GROUP') {
        let messageObj = {}
        messageObj = Object.assign( {text: lastMessage.messageForShow, fromAccount: lastMessage.fromAccount})
        arr.push(messageObj)
			}
    })
		return arr
	}
  sendMessage() {
    let group = this.roomID
    let message =  wx.$app.createTextMessage({
      to: group,
      conversationType: this.TIM.TYPES.CONV_GROUP,
      payload: {
        text: this.message
      }
    });
    // 2. 发送消息
    let promise = wx.$app.sendMessage(message);
    promise.then(imResponse => {
      // 发送成功
      this.getGroupMessage()
    }).catch(function(imError) {
      // 发送失败
      console.warn('sendMessage error:', imError);
    });
  }
  createRoomId(roomID, pushUrl) {
    let params = {
      uid: this.uid,
      id: this.id,
      roomNum: roomID,
      pushUrl
    }
    $http('/alecture/upRoomNum', params).then(res=>{
      this.roomID = roomID
      this.$apply()
    }).catch(err=>{
        
    })
  }
  methods = {
    setFull() {
      this.isFull = !this.isFull
      this.$apply()
    },
    changeInput(e){
      if (!e.detail.value) {
        return wxToast('消息不能为空')
      }
      this.message = e.detail.value
      clearInterval(this.timer)
      this.sendMessage()
    },
    searchScrollLower() {
      this.$broadcast('searchScrollLower')
    },
    submit() {
      if (!wx.getStorageSync('rendaPerfect')) {
        this.isScaleModal = !this.isScaleModal
        this.okText = '完善信息'
        this.text = '个人信息不完整，请前往完善'
        this.$apply()
        return
      }
      wxShowModal('', '确定报名该宣讲会吗?', '确定').then(() => {
        let params = {
          uid: this.uid,
          preachId: this.id
        }
        $http('/homepresentation/preachEnroll',params).then(res => {
          if (res.data) {
            this.lectureInfo.alectureApplyNum = 1
            this.$apply()
            wxToast('报名成功,请准时查看')
          } else {
            wxToast('报名失败')
          }
        })
      }).catch(() => {

      })
    },
    handleOver() {
      if (!this.roomID && this.rendaUserType == 2) {
        wxToast('宣讲会开始后，下拉刷新进入宣讲!')
        return
      }
      if (this.overBtnShow) {
        if (this.lectureInfo.status!=5) {
          wxToast('宣讲未开始不能结束')
          return
        }
        this.text = this.rendaUserType == 1 ?  '结束宣讲 确认结束宣讲会吗？' :  '确认退出宣讲会宣讲吗？'
        this.okText = '确认'
        this.isScaleModal = !this.isScaleModal
        this.$apply()
      } else {
          if (this.lectureInfo.status!=5 && this.rendaUserType == 2) {
            wxToast('宣讲会未开始，到达时间后一大波观众观看哦!')
          }
          if ((this.uid == this.com_uid) || (this.lectureInfo.status == 5 && this.rendaUserType == 2)) {
            wxToast('宣讲中断，可以再次进入进行宣讲哦！')
            let options = this.options
            let role
            if (options.roomID && this.rendaUserType == 1) {
              role = 'anchor'
              this.roomID = options.roomID
            } else {
              role = options.type == 'create' ? 'anchor' : 'audience'
            }
            this.roomName = options.roomName
            this.userName = options.userName
            this.role = role
            this.overBtnShow = true
            this.showLiveRoom = true
            if (role == 'audience') {
              this.roomID = options.roomID
            } else {
              this.pureAudio = options.pureAudio
            }
            this.$apply()
        }
        this.start()
        this.TIM = this.$parent.globalData.TIM
        this._initIM()
      }  
    },
    onRoomEvent(e) {
      var self = this;
      var args = e.detail;
      switch (args.tag) {
         case 'created': {
         this.createRoomId(args.data.roomID, args.data.pushUrl)
         break;
        }
        case 'roomClosed': {
          wx.showModal({
            content: `房间已解散`,
            showCancel: false,
            complete: () => {
              wx.navigateBack({ delta: 1 })
            }
          });
          break;
        }
        case 'error': {
          wx.showToast({
            title: `${args.detail}[${args.code}]`,
            icon: 'none',
            duration: 1500
          })
          if (args.code == 5000) {
            this.shouldExit = true;
            self.$apply()
          } else {
            console.error("收到error:", args)
            if (args.code != -9004) {
              setTimeout(() => {
                wx.navigateBack({ delta: 1 })
              }, 1500)
            } else {
              self.linked = false
              self.phoneNum = ''
              self.$apply()
            }
          }
          break;
        }
        case 'recvTextMsg': {
          console.log('收到消息:', e.detail.detail);
          var msg = e.detail.detail;
          self.comment.push({
            content: msg.message,
            name: msg.userName,
            time: msg.time
          });
          self.comment = self.comment
          self.toview = ''
          // 滚动条置底
          self.toview = 'scroll-bottom'
          self.$apply()
          break;
        }
        default: {
          console.log('onRoomEvent default: ', e)
          break;
        }
      }
    },
    onLinkClick() {
      var self = this;
      self.component && self.component.requestJoinAnchor();
      self.phoneNum = 'phone-1'
      self.$apply()
      self.setInternal();
    },
    setInternal() {
      var self = this;
      setTimeout(() => {
        if (!self.phoneNum) {
          return;
        }
        var curPhoneNum = '';
        switch (self.phoneNum) {
          case 'phone-1':
            curPhoneNum = 'phone-2';
            break;
          case 'phone-2':
            curPhoneNum = 'phone-3';
            break;
          case 'phone-3':
            curPhoneNum = 'phone-1';
            break;
          default:
            break;
        }
        self.phoneNum = curPhoneNum
        self.$apply()
        self.setInternal();
      }, 500);
    },
    showLog() {
      this.debug = !this.debug
      this.$apply()
    },
    changeMute() {
      this.muted = !this.muted
      this.$apply()
    },
    setBeauty() {
      this.beauty = this.beauty == 5 ? 0 : 5
      this.$apply()
    },
    changeCamera() {
      this.component && this.component.switchCamera();
      this.frontCamera = !this.frontCamera
      this.$apply()
    },
    bindInputMsg(e) {
      this.inputMsg = e.detail.value;
    },
    onBack() {
      this.overBtnShow = true
      this.text = this.rendaUserType == 1 ?  '结束宣讲 确认结束宣讲会吗？' :  '确认退出宣讲会宣讲吗？'
      this.okText = '确认'
      this.isScaleModal = !this.isScaleModal
      this.$apply()
    },
    // 再次加载
    againLoading() {
      if (this.networkType != 'none') {
        if (this.networkType!='wifi' && this.networkType != 'none') {
          wxToast('当前非Wi-Fi 播放，请注意流量消耗')
        } 
        this.autoplay = true
        this.$apply
      } else {
        wxToast('视频加载失败，请检查网络并重试')
      } 
    },
    // 视频播放
    bindplay() {
      if (this.networkType!='wifi' && this.networkType != 'none') {
        wxToast('当前非Wi-Fi 播放，请注意流量消耗')
      } else if (this.networkType == 'none') {
        wxToast('视频加载失败，请检查网络并重试')
      } else {
        this.autoplay = true
        this.showPalyBtn = false
        this.$apply()
      }
    },
    // 播放结束
    bindended() {
      this.autoplay = false
      this.showPalyBtn = true
      this.$apply()
    },
    // 返回 
    back() {
      wx.navigateBack({
        delta: 1 // 返回的页面数，如果 delta 大于现有页面数，则返回到首页,
      })
    },
    // 收藏
    collect() {
      let params = {
        uid: this.uid,
        preachId: this.id
      }
      let text = this.lectureInfo.collectNum == 1 ? '取消收藏' : '收藏'
      let url = this.lectureInfo.collectNum == 1 ? '/homepresentation/delAlectureCollect': '/homepresentation/collectPreach'
      console.log(params)
      $http(url, params).then(res => {
        console.log(res.data)
        console.log('收藏')
        if (res.data) {
          this.lectureInfo.collectNum = this.lectureInfo.collectNum == 1 ? 0 : 1
          this.$apply()
          wxToast(`${text}成功`)
        } else {
          wxToast(`${text}失败`)
        }
      })
    }
  }
  bindrefresherrefresh() {
    this.getLectureDetail(this.id)
  }
  getLectureDetail(id) {
    let params = {
      uid: this.uid,
      id
    }
    $http('/Homepresentation/getAlectureInfo', params).then(res => {
      this.getLectureInfo(res.data)
    })
  }
  getLectureInfo(info) {
    this.lectureInfo = info
    this.lectureInfo.starttime = handleTime(info.starttime)
    this.com_id = info.com_id
    this.com_uid = info.com_uid
    this.$apply()
  }
}
</script>
