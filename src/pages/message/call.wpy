<style lang="less">
 @import '../../style/message.less';
 .personal-message {
	 .dialogBox-row {
		&.dialogBox-row1 {
      height: calc(100% - 390rpx);
		} 
	 }
 }

</style>
<template>
	 <view class="bg-logo">
    <view class="bg">
      <view class="choose" wx:if="{{!isCalling}}">
        <template wx:if="{{type === 'call'}}">
          <view class="title">呼叫{{to}}中</view>
          <view class="btn">
            <view @tap="handleCloseRoom" class="close">
              <image src="../../images/close.png" class="operation"/>
            </view>
          </view>
        </template>
        <template wx:if="type === 'onCall'">
          <view class="title">{{from}}正在呼叫</view>
          <view class="btn">
            <view @tap="receive" class="close answer">
              <image src="../../images/call.png" class="operation"/>
            </view>
            <view @tap="handleRefuse" class="close">
              <image src="../../images/close.png" class="operation"/>
            </view>
          </view>
        </template>
      </view>
      <view class="call {{isCalling?'isCalling2': 'isCalling1'}}">
        <view class="room">
          <!-- <webrtc-room
            id="webrtcroom"
            :autoplay="true"
            :enableCamera="true"
            :roomID="roomID"
            :userID="userID"
            :userSig="userSig"
            :sdkAppID="sdkAppID"
            :beauty="beauty"
            :muted="muted"
            @RoomEvent="onRoomEvent"
            smallViewLeft="calc(100vw - 30vw - 2vw)"
            smallViewTop="20vw"
            smallViewWidth="30vw"
            smallViewHeight="30vh">
          </webrtc-room> -->
          <view class="panel">
            <view class="close-btn">
              <view @tap="microphone" class="normal">
                <image wx:if="!muted" src="../../images/voice.png" class="operation"/>
                <image wx:else src="../../images/voice-muted.png" class="operation"/>
              </view>
              <view @tap="handleCloseRoom" class="close">
                <image src="../../images/close.png" class="operation"/>
              </view>
              <view @tap="monitor" class="normal">
                <image src="../../images/monitor.png" class="operation"/>
              </view>
            </view>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import $moment from 'moment'
import { $http } from '@/http.js'
import { getImgUrl, wxShowModal, wxNavigateTo } from '@/util.js'
import TIM from 'tim-wx-sdk'
import { genTestUserSig } from '../../debug/GenerateTestUserSig'
const ERROR_OPEN_CAMERA = -4 // 打开摄像头失败
const ERROR_OPEN_MIC = -5 // 打开麦克风失败
const ERROR_PUSH_DISCONNECT = -6 // 推流连接断开
const ERROR_CAMERA_MIC_PERMISSION = -7 // 获取不到摄像头或者麦克风权限
const ERROR_EXCEEDS_THE_MAX_MEMBER = -8 // 超过最大成员数
const ERROR_REQUEST_ROOM_SIG = -9 // 获取房间SIG错误
const ERROR_JOIN_ROOM = -10 // 进房失败
export default class call extends wepy.page {
	data = {
		rendaUserTeamType: 0,
		params: {
			uid: '',
			com_uid: ''
		},
		list: [],
		count: 0,
		isView: false,
		com_uid: '',
    messageDetail: {},
    args: {},
    closeFlag: false,
    refuseFlag: false,
    isPending: true,
    isCalling: false,
    frontCamera: false,
    beauty: 0,
    muted: false,
    timeStamp: 0,
    sdkAppID: 0,
    userSig: '',
    userID: '',
    roomID: 0,
    type: '',
    from: '',
    to: '',
    timeoutId: '',
    startTime: 0
	}
	config = {
    navigationBarTitleText: '视频通话',
    usingComponents: {
      "webrtc-room": "../../component/webrtc-room/webrtc-room"
    }
	}
 onShow () {
    // 初始化参数
    const loginOptions = genTestUserSig(this.userID)
    this.userSig = loginOptions.userSig
    this.sdkAppID = loginOptions.sdkappid
    this.isCalling = false
    this.isPending = true
    // 发起方发起通话，1分钟超时时间
    if (this.userID === this.from) {
      this.timeoutId = setTimeout(() => {
        this.timeout()
      }, 60000)
    }
    wx.setKeepScreenOn({
      keepScreenOn: true
    })
    this.$store.commit('setCalling', true)
  }
  onUnload () {
    if (!(this.refuseFlag || this.closeFlag)) {
      if (this.isCalling) {
        this.closeRoom()
      } else {
        if (this.type === 'call') {
          this.closeRoom()
        } else {
          this.refuse()
        }
      }
    }
    this.refuseFlag = false
    this.closeFlag = false
    this.isCalling = false
    this.isPending = false
    clearTimeout(this.timeoutId)
    this.$store.commit('setCalling', false)
  }
  onHide () {
    this.isCalling = false
    this.isPending = false
    clearTimeout(this.timeoutId)
    this.closeRoom()
    this.$store.commit('setCalling', false)
    // 清理掉监听
    this.$bus.$off('onCall')
    this.$bus.$off('isCalling')
    this.$bus.$off('onClose')
    this.$bus.$off('onRefuse')
    this.$bus.$off('onBusy')
  }
  onLoad (options) {
    // onLoad的时候监听，在收到某些message的时候会触发的事件，可在main.js里查看事件 emit 条件
    console.log(options)
    this.args = JSON.parse(options.args)
    this.userID = wx.getStorageSync('rendaUid') || this.$parent.globalData.uid
    this.from = options.from
    this.to = options.to
    this.type = (this.userID === this.from) ? 'call' : 'onCall'
    this.roomID = this.args.room_id
  }
  methods = {
    onRoomEvent (e) {
      if ([ERROR_OPEN_CAMERA,
        ERROR_OPEN_MIC,
        ERROR_PUSH_DISCONNECT,
        ERROR_CAMERA_MIC_PERMISSION,
        ERROR_EXCEEDS_THE_MAX_MEMBER,
        ERROR_REQUEST_ROOM_SIG,
        ERROR_JOIN_ROOM].includes(e.target.code)) {
        this.webrtcroomComponent = this.$mp.page.selectComponent('#webrtcroom')
        this.webrtcroomComponent.stop()
        this.args.action = -2
        this.args.code = e.target.code
        const data = JSON.stringify(this.args)
        // 对方发起视频，接通成功后如果是我挂断的，这时挂断消息应该发给视频发起方
        let to = (this.to === this.userID) ? this.from : this.to
        const message = wx.$app.createCustomMessage({
          to: to,
          conversationType: TIM.TYPES.CONV_C2C,
          payload: {
            data: data,
            description: '',
            extension: ''
          }
        })
        this.$store.commit('sendMessage', message)
        wx.$app.sendMessage(message)
        clearTimeout(this.timeoutId)
      }
      if (e.target.tag === 'error') {
        wx.showToast({
          title: e.target.detail,
          duration: 1000
        })
      }
    },
    handleCloseRoom () {
      this.closeFlag = true
      this.closeRoom()
      wx.navigateBack({
        delta: 1
      })
    },
    handleRefuse () {
      this.refuseFlag = true
      this.refuse()
      wx.navigateBack({
        delta: 1
      })
    },
    // 发起方等待时挂断
    closeRoom () {
      this.webrtcroomComponent = this.$mp.page.selectComponent('#webrtcroom')
      this.webrtcroomComponent.stop()
      this.args.action = 5
      if (this.startTime === 0) {
        this.args.action = 1
      }
      if (this.startTime !== 0) {
        const endTime = new Date().getTime()
        this.args.duration = Math.round((endTime - this.startTime) / 1000)
        this.startTime = 0
      }
      const data = JSON.stringify(this.args)
      // 对方发起视频，接通成功后如果是我挂断的，这时挂断消息应该发给视频发起方
      let to = (this.to === this.$store.getters.myInfo.userID) ? this.from : this.to
      const message = wx.$app.createCustomMessage({
        to: to,
        conversationType: TYPES.CONV_C2C,
        payload: {
          data: data,
          description: '',
          extension: ''
        }
      })
      this.$store.commit('sendMessage', message)
      wx.$app.sendMessage(message)
      clearTimeout(this.timeoutId)
    },
    // 发起方等待接收方超过60s
    timeout () {
      this.args.action = 3
      const data = JSON.stringify(this.args)
      const message = wx.$app.createCustomMessage({
        to: this.to,
        conversationType: TYPES.CONV_C2C,
        payload: {
          data: data,
          description: '',
          extension: ''
        }
      })
      this.$store.commit('sendMessage', message)
      wx.$app.sendMessage(message)
      wx.navigateBack({
        delta: 1
      })
    },
    // 接受对方的请求
    receive () {
      this.args.action = 4
      const data = JSON.stringify(this.args)
      this.startTime = new Date().getTime()
      const message = wx.$app.createCustomMessage({
        to: this.from,
        conversationType: TYPES.CONV_C2C,
        payload: {
          data: data,
          description: '',
          extension: ''
        }
      })
      this.$store.commit('sendMessage', message)
      wx.$app.sendMessage(message)
      clearTimeout(this.timeoutId)
      this.isCalling = true
      this.isPending = false
      this.webrtcroomComponent = this.$mp.page.selectComponent('#webrtcroom')
      this.webrtcroomComponent.start()
    },
    onCall () {
      this.webrtcroomComponent = this.$mp.page.selectComponent('#webrtcroom')
      this.webrtcroomComponent.start()
    },
    // 拒绝
    refuse () {
      this.args.action = 2
      const data = JSON.stringify(this.args)
      const message = wx.$app.createCustomMessage({
        to: this.from,
        conversationType: TYPES.CONV_C2C,
        payload: {
          data: data,
          description: '',
          extension: ''
        }
      })
      this.$store.commit('sendMessage', message)
      this.$store.commit('setCalling', false)
      wx.$app.sendMessage(message)
      clearTimeout(this.timeoutId)
    },
    alreadyCalling (item) {
      const options = JSON.parse(item.payload.data)
      options.action = 6
      const message = wx.$app.createCustomMessage({
        to: item.from,
        conversationType: TYPES.CONV_C2C,
        payload: {
          data: JSON.stringify(options),
          description: '',
          extension: ''
        }
      })
      this.$store.commit('sendMessage', message)
      wx.$app.sendMessage(message)
    },
    microphone () {
      this.muted = !this.muted
    },
    monitor () {
      this.webrtcroomComponent = this.$mp.page.selectComponent('#webrtcroom')
      this.webrtcroomComponent.switchCamera()
    }
  }
  destory () {}
}
</script>