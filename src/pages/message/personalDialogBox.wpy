<style lang="less">
 @import '../../style/message.less';
 page {
	background: #F6F7FA;
	height: auto;
	.dialogBox-view {
		box-sizing: border-box;
	}
 }
 .date {
	 width: 100%;
	 text-align: center;
	 margin-bottom: 10rpx;
	 color:rgba(17,17,17, 0.3);
	 font-size: 24rpx;
	 margin-top: 10rpx;
 }
</style>
<template>
	<view  style="height: {{scrollHeight}}" class="dialogBox-view dialogBox-row {{!is_apply&&isShow ? 'dialogBox-row1':''}} {{!isShow&&is_apply ? 'dialogBox-row2':''}} {{isShow&&is_apply ? 'dialogBox-row3':''}}" id="chat" >
		<view class="message-header" wx:if="{{is_apply&&rendaUserType==1}}">
			<view class="weui-flex between message-header-content">
				<view @tap="videoCall">
					<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/video.png" class="dialogBox_icon" />
					<view  class="page__title">视频面试</view>
				</view>
				<view @tap="viewResume">
					<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/view.png" class="dialogBox_icon" />
					<view  class="page__title">查看简历</view>
				</view>
				<view @tap="noticeEntry" wx:if="{{!isEntry}}">
					<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/notice.png" class="dialogBox_icon" />
					<view  class="page__title">通知入职</view>
				</view>
				<view @tap="handleImproper">
					<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/close.png" class="dialogBox_icon" />
					<view class="page__title">不合适</view>
				</view>
			</view>
		</view>
		<scroll-view scroll-y="true" id="scroll">
			<view class="page_margin {{is_apply&&rendaUserType==1?'page_top':''}}">
				<repeat wx:for="{{messageList}}" wx:key="index">
					<view wx:if="{{(uid!=item.from&&item.type!='TIMCustomElem') || (uid!=item.from&&item.type=='TIMCustomElem'&&item.action&&item.action!=5)}}">
						<view class="date">{{item.time}}</view>
						<view class="weui-flex dialogBox-col weui-flex__item start">
							<image mode="scaleToFill" src="{{userProfile.avatar}}" class="dialogBox-col-header" wx:if="{{userProfile.avatar}}"/>
							<image mode="scaleToFill" src="https://a.rsd123.com/image/images/default1.png" class="dialogBox-col-header" wx:else/>
							<view class="dialogBox-content dialogBox-content-left weui-flex start">
							  <rich-text wx:if="{{item.type=='TIMTextElem'}}" class="msg_content" nodes="{{item.text}}"></rich-text>
								<image mode="scaleToFill" src="{{item.img}}" wx:if="{{item.type=='TIMImageElem'}}" @tap="viewImage({{item}})"  class="dialogBox_icon" />
								<view wx:if="{{item.type=='TIMCustomElem'}}">{{wxs.checkText(item.action)}}</view>
								<image mode="scaleToFill" wx:if="{{item.type=='TIMCustomElem'}}" src="https://d.rsd123.com/uploads/images/company/video.png" class="dialogBox_icon" />
							</view>
						</view>
					</view>
					<view class="weui-flex wrap dialogBox-col weui-flex__item end" wx:if="{{(uid==item.from&&item.type!='TIMCustomElem')||(uid==item.from&&item.type=='TIMCustomElem'&&item.action&&item.action!=5)}}">
						<view class="page__desc date">{{item.time}}</view>
					  <view class="weui-flex end">
							<view class="dialogBox-content weui-flex start dialogBox-content-right">
								<rich-text wx:if="{{item.type=='TIMTextElem'}}" class="msg_content" nodes="{{item.text}}"></rich-text>
								<image wx:if="{{item.type=='TIMImageElem'}}" mode="scaleToFill" src="{{item.img}}" @tap="viewImage({{item}})"  class="dialogBox_icon" />
								<view wx:if="{{item.type=='TIMCustomElem'}}">{{wxs.checkText(item.action)}}</view>
								<image wx:if="{{item.type=='TIMCustomElem'}}" mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/video2.png" class="dialogBox_icon" />
							</view>
							<image mode="scaleToFill" src="{{userInfo.head_img}}" class="dialogBox-col-header" wx:if="{{userInfo.head_img}}"/>
							<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/user.png" class="dialogBox-col-header" wx:else/>
						</view>
					</view>
				</repeat>
			</view>
		</scroll-view>
		<view class="message-input-box shadow">
			<view class="weui-flex between page_margin">
				<input class="weui-input weui-flex__item" value="{{message}}" @blur="blurInput" @confirm="inputBind" confirm-type="send" placeholder="请输入...."/>
				<image mode="scaleToFill" @tap="showMessageBtn" src="https://d.rsd123.com/uploads/images/company/add.png" class="dialogBox_icon" />
			</view>
			<view class="weui-flex start message-menus" wx:if="{{isShow}}">
				<view class="page_margin" @tap="videoCall" wx:if="{{is_apply}}">
					<view class="weui-flex center message-item">
						<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/video1.png" class="dialogBox_icon" />
					</view>
					<view  class="page__desc">视频面试</view>
				</view>
				<view class="page_margin" @tap="uploadImage">
					<view class="weui-flex center message-item">
						<image mode="scaleToFill" src="https://d.rsd123.com/uploads/images/company/phone.png" class="dialogBox_icon" />
					</view>
					<view  class="page__desc">图片</view>
				</view>
			</view>
		</view>
		<noticeModal :isScaleModal.sync="isNoticeModal" @setAllTime="setAllTime" @handleClose.user="noticeEntry"></noticeModal>
	  <modal :isScaleModal.sync="isModal" :modalObj.sync="modalObj" @handleClose="handleClose" @handleOk="handleOk"></modal>
	</view>
</template>
<script>
import wepy from 'wepy'
import { $http } from '@/http.js'
import $moment from 'moment'
import noticeModal from '@/components/noticeModal'
import modal from '@/components/modal'
import { getImgUrl, wxShowModal, wxNavigateTo, wxToast } from '@/util.js'
import wxs from '../../filterWxs/actionFilter.wxs'
import COS from 'cos-wx-sdk-v5'
wx.$app.registerPlugin({'cos-wx-sdk': COS})
wxs = { wxs }
export default class personalDialogBox extends wepy.page {
	components = {
		noticeModal: noticeModal,
		modal: modal
	}
	data = {
		params: {
			uid: '',
			id: ''
		},
		list: [],
		count: 0,
		isView: false,
		id: '',
		isLogin: false,
		conversationID: '',
		toUserId: '',
		userProfile: {},
		setSdkReady: false,
		messageList: [],
		uid: '',
		rendaUserType: '',
		is_apply: '',
		isNoticeModal: true,
		isModal: true,
		modalObj: {
      title: '不合适',
      subTitle: '请输入不合适理由'
		},
		isEntry: '',
		userInfo: {},
		message: '',
		isShow: false,
		isCompleted: true,
		nextReqMessageID: '',
		height: 0,
		isClear: false,
		scrollTop: 100,
		scrollHeight: 'auto',
		TIM: null,
		windowHeight: 0
	}
	config = {
		navigationBarTitleText: '消息',
		enablePullDownRefresh: true
	}
	onPullDownRefresh() {
    this.getMessage()
	}
  _initIM () {
    wx.$app.off( this.TIM.EVENT.MESSAGE_RECEIVED, this._onIMMessageReceived);
    wx.$app.on(this.TIM.EVENT.MESSAGE_RECEIVED, this._onIMMessageReceived, this)
  }
	onLoad (options) {
		wx.setStorageSync('hangRoom', false)
		this.TIM = this.$parent.globalData.TIM
		this.params.uid = options.userID
		this.uid = wx.getStorageSync('rendaUid') || this.$parent.globalData.uid
		this.userInfo = wx.getStorageSync('userInfo') ? JSON.parse(wx.getStorageSync('userInfo')): {}
		this.rendaUserType = wx.getStorageSync('rendaUserType')
		this.$apply()
		if (options.toUser) {
			this.toUserId = options.toUser
			console.log(this.toUserId)
			this.conversationID = 'C2C' + this.toUserId
		} else {
			this.conversationID = options.query
			this.toUserId = options.userID
		}
		if (this.rendaUserType ==2) {
		  this.getPersonal()
		}
		this.getCommunicate()	
		this.getConversationProfile()
		
	} 
	// 滚动到列表bottom
  scrollToBottom () {
	  wx.pageScrollTo({
			scrollTop: 99999
		})
	}
	onReady() {
		wx.getSystemInfo({
			success: (res) => {
				this.windowHeight = res.windowHeight
      }
		})
	}
	_onIMMessageReceived(event) {
		event.data.forEach((item, index) => {
			if (item.type == 'TIMCustomElem' && index == 0) {
				let action = JSON.parse(item._elements[0].content.data).action
				if ( action == 0 && item.from == this.toUserId) {
					let params = {
						args: item._elements[0].content.data,
						to: item.to,
						fromId: item.from,
						room_id: JSON.parse(item._elements[0].content.data).room_id
					}
					this.getuserSig(params)
				}
			} else {
				this.getMessage()
			}
			this.$apply()
		})
	}
	onShow () {
		this._initIM()
		this.getMessage()
	}
	onUnload () {
		this.isClear = false
	}
	getPersonal(){
		let params = {
			com_id: this.rendaUserType== 2 ?  this.toUserId : this.uid,
			uid: this.rendaUserType== 2 ? this.toUserId : this.id
		}
		$http('/autograph/CommunicateImmediately_personal', params).then(res => {
			console.log(res.data)
			console.log('获取信息')
			this.$apply()
		})
 }
 getCommunicate(){
	 let params  = {}
	 if (this.rendaUserType == 1) {
		params = {
			apply_uid:this.toUserId ,
			uid: this.uid
		}
	 } else {
		params = {
			apply_uid: this.uid,
			uid: this.params.uid
		}
	}
	$http('/autograph/CommunicateImmediately_company', params).then(res => {
		this.is_apply = Number(res.data.is_apply)
		this.isEntry = Number(res.data.is_entrymsg)
	  if (this.rendaUserType==1) {
			this.userInfo.head_img = res.data.logo_url
	  	this.userInfo.nickname = res.data.nickname
		}
		this.$apply()
	})
 }
 getNewList(list) {
		let messageObj = {}
		let img
		let arr = list.map(item=> {
			const { payload, to, from, time, type } = item
			let date = time
			date = $moment.unix(date).format('YYYY-MM-DD HH:mm')
			if (type == 'TIMImageElem') {
				img = payload.imageInfoArray[0].imageUrl
				messageObj =	Object.assign({ to, from, img, text: '', time: date,type })
				console.log(messageObj)
			} else if (type == 'TIMCustomElem'){
			  let data = JSON.parse(payload.data)
					messageObj =	Object.assign(data, { to, from, time: date,type })
				} else {
				messageObj =	Object.assign(payload, { to, from, time: date,type })
			}
			return messageObj
		})
		return arr
	}
	changeHeight(){
		let query = wx.createSelectorQuery()
		query.select('#scroll').boundingClientRect(res => {
			this.scrollHeight = 'auto'
			this.$apply()
		}).exec()
	}
  getMessage() {
	  let query = {conversationID: this.conversationID, count: 15}
		let promise2 = wx.$app.getMessageList(query)
		promise2.then(imResponse => {
			const messageList = imResponse.data.messageList; // 消息列表。
			// if (!messageList.length) {
			// 	this.scrollHeight =  this.windowHeight + 'px'
			// } else {
			//   this.changeHeight()
			// }
			this.messageList = this.getNewList(messageList)
			console.log(this.messageList)
			this.scrollToBottom()
			// this.nextReqMessageID = imResponse.data.nextReqMessageID; // 用于续拉，分页续拉时需传入该字段。
			// this.isCompleted = imResponse.data.isCompleted; // 表示是否已经拉完所有消息。
			this.$apply()
			let interval = setInterval(() => {
				if (this.messageList.length !== 0) {
					this.scrollToBottom()
					clearInterval(interval)
				}
			}, 600)
		}).catch(imError => {
			console.warn('messageList error:', imError); // 登录失败的相关信息
		});
 }
 getConversationProfile() {
		let conversationID = 'C2C' + this.uid
		let promise =  wx.$app.getConversationProfile(this.conversationID);
		promise.then(imResponse => {
			// 获取成功
			const { userProfile } = imResponse.data.conversation
			this.userProfile = userProfile
			this.$apply() // 会话资料
		}).catch(function(imError) {
			console.warn('getConversationProfile error:', imError); // 获取会话资料失败的相关信息
		});
	}
	getuserSig (params) {
		$http('/autograph/getAutograph', { uid: this.uid }).then(res => {
			params.userSig = res.data
			this.routerView(params)
		})
	}
	routerView (params) {
		const url = `/pages/room/room?roomID=${params.room_id}&userSig=${params.userSig}` +
			`&to=${params.to}` +
			`&args=${params.args}`+
			`&fromId=${params.fromId}` +
			`&userID=${this.uid}`+
			`&nick=${this.userProfile.nick}` +
			`&name=${this.userInfo.nickname}`
			wxNavigateTo(url)
	}
	getRandomInt (min, max) {
		min = Math.ceil(min)
		max = Math.floor(max)
		return Math.floor(Math.random() * (max - min)) + min
	}
	entryUser(params) {
		$http('/Autograph/entry', params).then(res => {
			if (res.data) {
				let value = '入职通知：<br>入职时间：' + $moment.unix(params.entry_time).format('YYYY-MM-DD HH:mm') + ';<br>入职地点：' + params.entry_address + ';<br>入职内容：' + params.content
				this.sendMessageApi(value)
				this.isEntry = 1
				this.isNoticeModal = !this.isNoticeModal
		   	this.$apply()
			}
		})
	}
	sendMessageApi(value) {
		let message = wx.$app.createTextMessage({ to: this.toUserId, conversationType: this.TIM.TYPES.CONV_C2C, payload: { text: value } });
		let promise1 = wx.$app.sendMessage(message);
		promise1.then(imResponse => {
			console.log('发送成功')
			let message = {
				to: this.toUserId,
				from: this.uid,
				text: value,
				time: $moment().format('YYYY-MM-DD HH:mm'),
				type: 'TIMTextElem'
			}
			this.messageList.push(message)
			this.$apply()
			this.scrollToBottom()
			// this.changeHeight()
			this.message = ''
		}).catch(function (imError) {
			console.warn('sendMessage error:', imError); // 获取会话列表失败的相关信息
		});
	}
	events = {
		setAllTime: data => {
			let params = Object.assign({apply_uid: this.toUserId, uid: this.uid}, data)
			this.entryUser(params)
		},
		handleOk: data => {
			let value = '不合适' + data
      this.sendMessageApi(value)
    },
    handleClose: ()=> {
      this.isModal = !this.isModal
      this.$apply()
    }
	}
	methods = {
		noticeEntry(){
			this.isNoticeModal = !this.isNoticeModal
			this.$apply()
		},
		handleImproper() {
			this.isModal = !this.isModal
			this.$apply()
		},
		inputBind(e) {
			this.message = e.detail.value
			if (!this.message) {
				return wxToast('消息不能为空')
			}
		  this.sendMessageApi(this.message)
		},
		blurInput(e) {
			this.message = ''
			this.$apply()
		},
		showMessageBtn() {
			this.isShow = !this.isShow
			this.$apply()
		},
		uploadImage() {
			wx.chooseImage({
				sourceType: ['album'], // 从相册选择
				count: 1, // 只选一张，目前 SDK 不支持一次发送多张图片
				success: res => {
					let message =  wx.$app.createImageMessage({
						to: this.toUserId,
						conversationType: this.TIM.TYPES.CONV_C2C,
						payload: { file: res },
						onProgress: function(event) { console.log('file uploading:', event) }
					})
					let promise = wx.$app.sendMessage(message)
					promise.then(imResponse => {
				  	this.getMessage()
					}).catch(function(imError) {
						// 发送失败
						console.warn('sendMessage error:', imError);
					});
				}
			})
		},
		viewImage(item) {
			wx.previewImage({
				current: item.img, // 当前显示图片的http链接
				urls: [item.img] // 需要预览的图片http链接列表
			})
		},
		videoCall () {
      const options = {
        call_id: '',
        version: 3,
        room_id: this.getRandomInt(0, 42949),
        action: 0,
        duration: 0,
        invited_list: []
      }
      let args = JSON.stringify(options)
      const message = wx.$app.createCustomMessage({
        to: this.toUserId,
        conversationType: this.TIM.TYPES.CONV_C2C,
        payload: {
          data: args,
          description: '',
          extension: ''
        }
			})
      let promise = wx.$app.sendMessage(message);
			promise.then(imResponse => {
				let query = Object.assign({args,to: this.toUserId,fromId: this.uid,room_id:options.room_id})
				this.getuserSig(query)
			}).catch(function(imError) {
				// 发送失败
				console.warn('sendMessage error:', imError);
			});
    },
		viewResume() {
			wxNavigateTo('/pages/my/resume?query=' + this.toUserId)
		}
	}
}
</script>