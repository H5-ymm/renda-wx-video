<style lang="less">
 @import '../../style/message.less';
 page {
	 height: auto;
 }
 .date {
	 width: 100%;
	 text-align: center;
	 margin-bottom: 10rpx;
 }
</style>
<template>
	<view class="dialogBox-view dialogBox-row {{!is_apply&&isShow ? 'dialogBox-row1':''}} {{!isShow&&is_apply ? 'dialogBox-row2':''}} {{isShow&&is_apply ? 'dialogBox-row3':''}}" id="chat" >
		<view class="message-header">
			<view class="weui-flex between message-header-content" wx:if="{{is_apply}}">
				<view @tap="videoCall">
					<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/video.png" class="dialogBox_icon" />
					<view  class="page__title">视频面试</view>
				</view>
				<view @tap="viewResume">
					<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/view.png" class="dialogBox_icon" />
					<view  class="page__title">查看简历</view>
				</view>
				<view @tap="noticeEntry" wx:if="{{!isEntry}}">
					<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/notice.png" class="dialogBox_icon" />
					<view  class="page__title">通知入职</view>
				</view>
				<view @tap="handleImproper">
					<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/close.png" class="dialogBox_icon" />
					<view class="page__title">不合适</view>
				</view>
			</view>
		</view>
		<scroll-view scroll-y="true" style="height:100%">
			<view class="page_margin">
				<repeat wx:for="{{messageList}}" wx:key="index">
					<view wx:if="{{(uid!=item.from&&rendaUserType==1) || (params.uid==item.from&&rendaUserType==2)}}">
						<view class="page__desc date">{{item.time}}</view>
						<view class="weui-flex dialogBox-col weui-flex__item start">
							<image mode="scaleToFill" src="{{userProfile.avatar}}" class="dialogBox-col-header" wx:if="{{userProfile.avatar}}"/>
							<image mode="scaleToFill" src="https://a.rsd123.com/image/images/default1.png" class="dialogBox-col-header" wx:else/>
							<view class="dialogBox-content dialogBox-content-left weui-flex start">
							  <view wx:if="{{item.text}}" >{{item.text}}</view>
								<image mode="scaleToFill" src="{{item.img}}" wx:if="{{item.img}}" @tap="viewImage({{item}})"  class="dialogBox_icon" />
								<view wx:if="{{!item.text&&!item.img}}" >挂断视频</view>
								<image mode="scaleToFill" wx:if="{{!item.text&&!item.img}}" src="http://www.ttxsg.com.cn:39009/uploads/images/company/video.png" class="dialogBox_icon" />
							</view>
						</view>
					</view>
					<view class="weui-flex wrap dialogBox-col weui-flex__item end" wx:else>
						<view class="page__desc date">{{item.time}}</view>
						<view class="dialogBox-content weui-flex start dialogBox-content-right">
							<view wx:if="{{item.text}}">{{item.text}}</view>
							<image mode="scaleToFill" src="{{item.img}}" wx:if="{{item.img}}" @tap="viewImage({{item}})"  class="dialogBox_icon" />
							<view wx:if="{{!item.text&&!item.img}}" >挂断视频</view>
							<image mode="scaleToFill" wx:if="{{!item.text&&!item.img}}" src="http://www.ttxsg.com.cn:39009/uploads/images/company/video2.png" class="dialogBox_icon" />
						</view>
						<image mode="scaleToFill" src="{{userInfo.head_img}}" class="dialogBox-col-header" wx:if="{{userInfo.head_img}}"/>
						<image mode="scaleToFill" src="https://a.rsd123.com/image/images/default1.png" class="dialogBox-col-header" wx:else/>
					</view>
				</repeat>
			</view>
		</scroll-view>
		<view class="message-input-box shadow">
			<view class="weui-flex between page_margin">
				<input class="weui-input weui-flex__item" value="{{message}}" @blur="blurInput" @confirm="inputBind" confirm-type="send" placeholder="请输入...."/>
				<image mode="scaleToFill" @tap="showMessageBtn" src="http://www.ttxsg.com.cn:39009/uploads/images/company/add.png" class="dialogBox_icon" />
			</view>
			<view class="weui-flex start message-menus" wx:if="{{isShow}}">
				<view class="page_margin" @tap="videoCall">
					<view class="weui-flex center message-item">
						<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/video1.png" class="dialogBox_icon" />
					</view>
					<view  class="page__desc">视频面试</view>
				</view>
				<view class="page_margin" @tap="uploadImage">
					<view class="weui-flex center message-item">
						<image mode="scaleToFill" src="http://www.ttxsg.com.cn:39009/uploads/images/company/phone.png" class="dialogBox_icon" />
					</view>
					<view  class="page__desc">图片</view>
				</view>
			</view>
		</view>
		<noticeModal :isScaleModal.sync="isNoticeModal" @setAllTime="setAllTime"></noticeModal>
	  <modal :isScaleModal.sync="isModal" :modalObj.sync="modalObj" @handleClose="handleClose" @handleOk="handleOk"></modal>
	</view>
</template>
<script>
import wepy from 'wepy'
import { $http } from '@/http.js'
import $moment from 'moment'
import noticeModal from '@/components/noticeModal'
import modal from '@/components/modal'
import { getImgUrl, wxShowModal, wxNavigateTo, wxToast } from '@/util.js'
import TIM from 'tim-wx-sdk'
// import TIM from '@/lib/tim-wx.js'
import COS from 'cos-wx-sdk-v5'
const tim = TIM.create({
	SDKAppID: 1400335565
})
tim.setLogLevel(0)
tim.registerPlugin({ 'cos-wx-sdk': COS });
export default class personalDialogBox extends wepy.page {
	components = {
		noticeModal: noticeModal,
		modal: modal
	}
	data = {
		params: {
			uid: '',
			id: ''
		},
		list: [],
		count: 0,
		isView: false,
		id: '',
		isLogin: false,
		conversationID: '',
		toUserId: '',
		userProfile: {},
		setSdkReady: false,
		messageList: [],
		uid: '',
		rendaUserType: '',
		is_apply: '',
		isNoticeModal: true,
		isModal: true,
		modalObj: {
      title: '不合适',
      subTitle: '请输入不合适理由'
		},
		isEntry: '',
		userInfo: {},
		message: '',
		isShow: false,
		isCompleted: true,
		nextReqMessageID: '',
		height: 0,
		isClear: false,
		scrollTop: 100
	}
	config = {
		navigationBarTitleText: '消息',
		enablePullDownRefresh: true
	}
	onPullDownRefresh() {
    this.getMessage()
  }
	onLoad (options) {
		this.params.uid = options.userID
		this.uid = wx.getStorageSync('rendaUid') || this.$parent.globalData.uid
		if (options.toUser) {
			this.toUserId = options.toUser
			this.conversationID = 'C2C' + this.toUserId
			this.getUserSig()
		} else {
			this.conversationID = options.query
			this.isLogin = options.isLogin
			this.toUserId = options.userID
			this.getMessage()
		}
		this.userInfo = wx.getStorageSync('userInfo')?JSON.parse(wx.getStorageSync('userInfo')):{}
		this.rendaUserType = wx.getStorageSync('rendaUserType')
		this.$apply()
		if (this.rendaUserType == 1) {
			this.getCommunicate()
		} else {
			this.getPersonal()
		}
	}  // 滚动到列表bottom
  scrollToBottom () {
		if (this.isClear) {
			console.log(222)
			let query = wx.createSelectorQuery()
			query.select('#chat').boundingClientRect(res => {
				wx.pageScrollTo({
					scrollTop: 99999
				})
			}).exec()
		}
	}
	onShow () {
		this.isClear = true
		this.$apply()
		tim.on(TIM.EVENT.MESSAGE_RECEIVED, (event )=> {
			console.log(event.data)
			let query = wx.createSelectorQuery()
			query.select('#chat').boundingClientRect(res => {
        if (res.bottom - this.height < 150) {
          this.scrollToBottom()
        }
			}).exec()
			let interval = setInterval(() => {
      if (this.messageList.length !== 0) {
					this.scrollToBottom()
					clearInterval(interval)
				}
			}, 600)
			let arr = []
			event.data.forEach(item => {
				if (item.type == 'TIMCustomElem') {
					let args = JSON.stringify(item._elements[0].content)
					console.log(args)
					let url = `/pages/room/room?args=${args}&from=${item.from}&to=${item.to}&uid=${this.uid}`
          wx.navigateTo({url})
				} else {
						let message = {
						to: item.to,
						from: item.from,
						text:item._elements[0].content.text,
						time: $moment.unix(item.time).format('YYYY-MM-DD HH:mm')
					}
					arr.push(message)
				}
				this.messageList = this.messageList.concat(arr)
		   	this.$apply()
			})
		
			// 收到推送的单聊、群聊、群提示、群系统通知的新消息，可通过遍历 event.data 获取消息列表数据并渲染到页面
			// event.name - TIM.EVENT.MESSAGE_RECEIVED
			// event.data - 存储 Message 对象的数组 - [Message]
		});
 }
onUnload () {
	this.isClear = false
}
onReachBottom() {
  // if(!this.isCompleted) {
	// 	this.getMessage(this.nextReqMessageID)
	// }
}
getPersonal(){
	let params = {
		com_id: this.params.uid,
		uid: this.uid
	}
	$http('/autograph/CommunicateImmediately_personal', params).then(res => {
		this.is_apply = ''
		this.$apply()
	})
 }
 getCommunicate(){
	let params = {
		apply_uid: this.toUserId,
		uid: this.params.uid
	}
	$http('/autograph/CommunicateImmediately_company', params).then(res => {
		this.is_apply = res.data.is_apply
		this.isEntry = res.data.is_entrymsg
		this.$apply()
	})
 }
 getNewList(list) {
		let messageObj = {}
		let img
		let arr = list.map(item=> {
			const { payload, to, from, time } = item
			let date = time
			date = $moment.unix(date).format('YYYY-MM-DD HH:mm')
			if (payload.imageInfoArray && payload.imageInfoArray.length) {
				img = payload.imageInfoArray[0].imageUrl
				messageObj =	Object.assign({ to, from, img, text: '', time: date })
			} else {
				messageObj =	Object.assign(payload, { to, from, time: date })
			}
			return messageObj
		})
		return arr
	}
 getMessage(params) {
	  let query = {conversationID: this.conversationID, count: 15}
	  if (params) {
      query.nextReqMessageID = params
		}
		let promise2 = tim.getMessageList(query)
		promise2.then(imResponse => {
			const messageList = imResponse.data.messageList; // 消息列表。
			this.messageList = this.getNewList(messageList)
			// this.messageList = this.messageList.concat(this.messageList)
			this.nextReqMessageID = imResponse.data.nextReqMessageID; // 用于续拉，分页续拉时需传入该字段。
			this.isCompleted = imResponse.data.isCompleted; // 表示是否已经拉完所有消息。
			this.scrollToBottom()
			this.$apply()
			// if (!this.isCompleted) {
			// 	this.getMessage(this.nextReqMessageID)
			// } else {
			// 	this.scrollToBottom()
			// 	return
			// }
			this.getConversationProfile()
		}).catch(imError => {
			console.warn('messageList error:', imError); // 登录失败的相关信息
		});
 }
 getUserSig() {
		$http('/autograph/getAutograph', { uid: this.uid }).then(res => {
			let promise = tim.login({ userID: this.uid + '', userSig: res.data });
			promise.then(imResponse => {
				if (!this.setSdkReady) {
					this.getMsgDetail()
				} else {
					this.getMessageList()
				}	
				if (imResponse.data.repeatLogin === true) {
					console.log('登录成功');
					this.getMessage()
				}
			}).catch(imError => {
				console.warn('login error:', imError); // 登录失败的相关信息
			});
		})
	}
	getMsgDetail() {
		let onSdkReady = event=> {
			wx.setStorageSync('setSdkReady', true)
			this.getMessage()
		};
		tim.on(TIM.EVENT.SDK_READY, onSdkReady);
	}
	getConversationProfile() {
		let conversationID = 'C2C' + this.uid
		let promise = tim.getConversationProfile(this.conversationID);
		promise.then(imResponse => {
			// 获取成功
			const { userProfile } = imResponse.data.conversation
			this.userProfile = userProfile
			this.$apply() // 会话资料
		}).catch(function(imError) {
			console.warn('getConversationProfile error:', imError); // 获取会话资料失败的相关信息
		});
	}
	routerView (params) {
		const url = `/pages/room/room?roomID=${params.room_num}` +
			`&userSig=${params.userSig}` +
			`&template=grid&debugMode=false&cloudenv=PRO` +
			`&localVideo=true` +
			`&localAudio=true` +
			`&enableEarMonitor=false` +
			`&enableAutoFocus=true` +
			`&localMirror=auto` +
			`&enableAgc=true` +
			`&enableAns=true` +
			`&encsmall=true` +
			`&frontCamera=front` +
			`&videoWidth=360` +
			`&videoHeight=640` +
			`&scene=rtc` +
			`&userID=${params.room_name}` +
			`&minBitrate=600&maxBitrate=900`
		wx.navigateTo({
			url: url
		})
	}
	getRandomInt (min, max) {
		min = Math.ceil(min)
		max = Math.floor(max)
		return Math.floor(Math.random() * (max - min)) + min
	}
	entryUser(params) {
		$http('/Autograph/entry', params).then(res => {
			if (res.data) {
				let value = '入职通知' + $moment.unix(params.entry_time).format('YYYY-MM-DD HH:mm') + params.entry_address+ params.content
				this.sendMessageApi(value)
				this.isNoticeModal = !this.isNoticeModal
		   	this.$apply()
			}
		})
  }
	events = {
		setAllTime: data => {
			console.log(data)
			let params = Object.assign({apply_uid: this.toUserId, uid: this.params.uid}, data)
			this.entryUser(params)
		},
		handleOk: data => {
			let value = '不合适' + data
      this.sendMessageApi(value)
    },
    handleClose: ()=> {
      this.isModal = !this.isModal
      this.$apply()
    }
	}
	sendMessageApi(value) {
		let message = tim.createTextMessage({ to: this.toUserId, conversationType: TIM.TYPES.CONV_C2C, payload: { text: value } });
		let promise1 = tim.sendMessage(message);
		promise1.then(imResponse => {
			console.log('发送成功')
			// this.getMessage()
			let message = {
				to: this.toUserId,
				from: this.uid,
				text: value,
				time: $moment().format('YYYY-MM-DD HH:mm')
			}
			this.messageList.push(message)
		  this.scrollToBottom()
			this.message = ''
			this.$apply()
		}).catch(function (imError) {
			console.warn('sendMessage error:', imError); // 获取会话列表失败的相关信息
		});
	}
	methods = {
		noticeEntry(){
			this.isNoticeModal = !this.isNoticeModal
			this.$apply()
		},
		handleImproper() {
			this.isModal = !this.isModal
			this.$apply()
		},
		inputBind(e) {
			this.message = e.detail.value
			if (!this.message) {
				return wxToast('消息不能为空')
			}
		  this.sendMessageApi(this.message)
		},
		blurInput(e) {
			console.log(e)
			this.message = ''
			this.$apply()
		},
		showMessageBtn() {
			this.isShow = !this.isShow
			this.$apply()
		},
		uploadImage() {
			wx.chooseImage({
				sourceType: ['album'], // 从相册选择
				count: 1, // 只选一张，目前 SDK 不支持一次发送多张图片
				success: res => {
					// 2. 创建消息实例，接口返回的实例可以上屏
					let message = tim.createImageMessage({
						to: this.toUserId,
						conversationType: TIM.TYPES.CONV_C2C,
						payload: { file: res },
						onProgress: function(event) { console.log('file uploading:', event) }
					});
					// 3. 发送图片
					console.log(res)
					let promise = tim.sendMessage(message);
					promise.then(imResponse => {
						// 发送成功
						let message = {
							to: this.toUserId,
							from: this.uid,
							text: '',
							img: res.tempFilePaths[0],
              time: $moment().format('YYYY-MM-DD HH:mm')
						}
						this.messageList.push(message)
						this.scrollToBottom()
						console.log(imResponse);
					}).catch(function(imError) {
						// 发送失败
						console.warn('sendMessage error:', imError);
					});
				}
			})
		},
		viewImage(item) {
			wx.previewImage({
				current: item.img, // 当前显示图片的http链接
				urls: [item.img] // 需要预览的图片http链接列表
			})
		},
		videoCall () {
      const options = {
        call_id: '',
        version: 3,
        room_id: this.getRandomInt(0, 42949),
        action: 0,
        duration: 0,
        invited_list: []
      }
      let args = JSON.stringify(options)
      const message = tim.createCustomMessage({
        to: this.toUserId,
        conversationType: TIM.TYPES.CONV_C2C,
        payload: {
          data: args,
          description: '',
          extension: ''
        }
      })
     let promise = tim.sendMessage(message);
			promise.then(imResponse => {
				// 发送成功
				this.getMessage()
				console.log(imResponse);
			}).catch(function(imError) {
				// 发送失败
				console.warn('sendMessage error:', imError);
			});
      let url = `/pages/room/room?args=${args}&from=${this.uid}&to=${this.toUserId}&uid=${this.uid}`
      wx.navigateTo({url})
      // this.handleClose()
    },
		viewResume() {
			console.log(this.toUserId)
			wxNavigateTo('/pages/my/resume?query=' + this.toUserId)
		}
	}
}
</script>